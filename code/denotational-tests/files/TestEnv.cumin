{-
Example from Ancestors.cumin
-}

data Person = Alice | Bob | Eve | Peter | Paul

parent :: Person -> Person
parent p = case p of
  Eve  -> choose<:Person:> Alice Bob
  Paul -> choose<:Person:> Eve Peter
  x    -> failed<:Person:>

children :: Person -> Person
children a = let b :: Person free in case a == parent b of
  { True -> b; False -> failed<:Person:> }

grandparent :: Person -> Person
grandparent a = let b :: Person free in let c :: Person free in
  case b == parent a of
    True -> case c == parent b of
      True -> c
      False -> failed<:Person:>
    False -> failed<:Person:>

{- Built-in natural numbers -}

minus :: Nat -> Nat -> Nat
minus a b = let k :: Nat free in guard<:Nat:> (a == b + k) k

mult :: Nat -> Nat -> Nat
mult a b = case a == 0 of
  True -> 0
  False -> b + mult (minus a 1) b

fac :: Nat -> Nat
fac n = case n == 0 of
  False -> mult n (fac (minus n 1))
  True  -> 1

{- Peano Numbers -}

data Peano = Z | S Peano

addPeano :: Peano -> Peano -> Peano
addPeano a b = case a of
  Z -> b
  S r -> S (addPeano r b)

subPeanoDet :: Peano -> Peano -> Peano
subPeanoDet a b = case b of
  Z -> a
  S b' -> case a of
    Z -> failed<:Peano:>
    S a' -> subPeanoDet a' b'

subPeanoFree :: Peano -> Peano -> Peano
subPeanoFree a b = let d :: Peano free in
  guard<:Peano:> (addPeano b d == a) d

multPeano :: Peano -> Peano -> Peano
multPeano m n = case n of
  Z -> Z
  S n' -> addPeano m (multPeano m n')

peanoToNat :: Peano -> Nat
peanoToNat p = case p of
  Z -> 0
  S r -> 1 + peanoToNat r

cmpPeano :: Peano -> Peano -> Ordering
cmpPeano m n = case m of
  Z -> case n of
    Z -> EQ
    S n' -> LT
  S m' -> case n of
    Z -> GT
    S n' -> cmpPeano m' n'

{- Church Numerals -}

churchZ :: forall a.(a -> a) -> a -> a
churchZ f z = z

churchS :: forall a.((a -> a) -> a -> a) -> (a -> a) -> a -> a
churchS n f z = n f (f z)

addChurch :: forall a.((a -> a) -> a -> a) -> ((a -> a) -> a -> a) -> (a -> a) -> a -> a
addChurch m n f z = m f (n f z)

multChurch :: forall a.((a -> a) -> a -> a) -> ((a -> a) -> a -> a) -> (a -> a) -> a -> a
multChurch m n f z = m (n f) z

churchToPeano :: ((Peano -> Peano) -> Peano -> Peano) -> Peano
churchToPeano n = n S Z

peanoToChurch :: forall a. Peano -> (a -> a) -> a -> a
peanoToChurch n f z = case n of
  Z -> z
  S n' -> peanoToChurch<:a:> n' f (f z)

{- Ordering and Comparisons -}

data Ordering = LT | EQ | GT

cmpNat :: Nat -> Nat -> Ordering
cmpNat  n m = cmpNat' n m n m

cmpNat' :: Nat -> Nat -> Nat -> Nat -> Ordering
cmpNat' n m n' m' = case m == n' of
  False -> case n == m' of
    False -> cmpNat' n m (n' + 1) (m' + 1)
    True  -> GT
  True -> case n == m' of
    False -> LT
    True  -> EQ

{- Sorting by Permutations -}

insertAnywhere :: forall a.a -> [a] -> [a]
insertAnywhere x xs = case xs of
  Nil -> [x]<:a:>
  Cons y ys -> choose<:List a:> (Cons<:a:> x xs) (Cons<:a:> y (insertAnywhere<:a:> x ys))

isSorted :: forall a.(a -> a -> Ordering) -> [a] -> Bool
isSorted cmp xs = case xs of
  Nil -> True
  Cons y ys -> isSorted'<:a:> cmp y ys

isSorted' :: forall a.(a -> a -> Ordering) -> a -> [a] -> Bool
isSorted' cmp pred xs = case xs of
  Nil -> True
  Cons y ys -> case cmp pred y of
    GT -> False
    o  -> isSorted'<:a:> cmp y ys

permuted :: forall a. List a -> List a
permuted = foldr<:a,List a:> insertAnywhere<:a:> Nil<:a:>

permSort :: forall a. (a -> a -> Ordering) -> [a] -> [a]
permSort cmp xs = let ys = permuted<:a:> xs in guard<:List a:> (isSorted<:a:> cmp ys) ys

{- Miscellaneous functions -}

caseFailure :: forall a.List a -> List a
caseFailure  x = case x of { Nil -> failed<:List a:>; y -> y }

{- repeat only works with iterative deepening search when using unrestricted step index -}
repeat :: forall a. a -> [a]
repeat x = choose<:List a:> Nil<:a:> (Cons<:a:> x (repeat<:a:> x))

{- Benchmarks -}

{- All top-level bindings prefixed with "bench" are considered to be benchmarks by the benchmarking program
   and must not have any arguments and have to be monomorphic.
-}

benchAddPeano :: Peano
benchAddPeano = addPeano (S (S (S Z))) (S (S Z))

benchSubPeanoDet :: Peano
benchSubPeanoDet = subPeanoDet (S (S (S Z))) (S (S Z))

benchSubPeanoFree :: Peano
benchSubPeanoFree = subPeanoFree (S (S (S Z))) (S (S Z))

benchSort :: List Nat
benchSort = permSort<:Nat:> cmpNat [1,5,3,2,4]<:Nat:>


{- The test application automatically evaluates all functions beginning with "eqTest" and compares
   the results of the CuMin and SaLT interpreter on them.

   The resulting values must not return function types, since they cannot be compared.
-}

eqTestCaseFailureCase1 :: List Nat
eqTestCaseFailureCase1 = caseFailure<:Nat:> []<:Nat:>

eqTestCaseFailureCase2 :: List Nat
eqTestCaseFailureCase2 = caseFailure<:Nat:> [1,2,3]<:Nat:>

eqTestCaseFailureCase3 :: List Nat
eqTestCaseFailureCase3 = caseFailure<:Nat:> failed<:List Nat:>

eqTestLetFreeFinite :: Either (Maybe Bool) Bool
eqTestLetFreeFinite = let x :: Either (Maybe Bool) Bool free in x

eqTestLetFreeInfinite1 :: List Bool
eqTestLetFreeInfinite1 = let x :: List Bool free in x

eqTestLetFreeInfinite2 :: List Nat
eqTestLetFreeInfinite2 = let x :: List Nat free in x

eqTestAddition :: Nat
eqTestAddition = 10 + let n :: Nat free in n

eqTestSubtraction :: Nat
eqTestSubtraction = minus (choose<:Nat:> 5 7) 5

eqTestLetBinding1 :: Nat
eqTestLetBinding1 = let x = 1 in let y = choose<:Nat:> 2 3 in x + y

eqTestLetBindingShadowing :: Bool
eqTestLetBindingShadowing = let x = False in let x = True in x

eqTestAncestorsChildren :: Person
eqTestAncestorsChildren = children Alice

eqTestAncestorsParent :: Person
eqTestAncestorsParent = parent Eve

eqTestAncestorsGrandparent :: Person
eqTestAncestorsGrandparent = grandparent Paul

eqTestRecursion :: Nat
eqTestRecursion = fac 5
